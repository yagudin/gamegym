from gamegym.algorithms import BestResponse, OutcomeMCCFR, exploitability
from gamegym.games import Goofspiel
from gamegym.algorithms.valuesgd import GoofSpielCardsValueStore, SparseStochasticValueLearning
import numpy as np
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import pandas as ps


import sys
sys.setrecursionlimit(100000)
import logging
logging.basicConfig(level=logging.INFO)

def main():
    N = 4
    ITLIM = int(sys.argv[1])
    g = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM)
    mc = OutcomeMCCFR(g, seed=56)

    data = []
    its = 1000
    while its < ITLIM:
        print("\nRunning for", its)
        fname = "goof-{}-{}-oscfr.pickle".format(N, its)
        mc.persist(fname, iterations=its - mc.iterations)
        assert mc.iterations == its
        exp0 = exploitability(g, 0, mc)
        exp1 = exploitability(g, 1, mc)
        print("Exploitability after {:7d} turns (mc, g): {}, {}".format(its, exp0, exp1))

        vs = GoofSpielCardsValueStore(g)
        vl = SparseStochasticValueLearning(g, vs, seed=its)
        vla = []
        vla.append(vl.compute([mc, mc], 2000, alpha=0.01, store_step=1))
        vla.append(vl.compute([mc, mc], 2000, alpha=0.003, store_step=1))
        vla.append(vl.compute([mc, mc], 2000, alpha=0.001, store_step=1))
        vla.append(vl.compute([mc, mc], 2000, alpha=0.0003, store_step=1))
        print("Card values at a=0.0001: ", vs.values)

        plt.figure()
        vldata = ps.DataFrame(np.concatenate(vla, axis=0), columns=list(range(1, N+1)))
        vldata.plot()
        plt.savefig("goof-{}-value_learning-{}.png".format(N, its), dpi=300)

        g2 = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM, rewards=vs.values)
        mc2 = OutcomeMCCFR(g2, seed=its + 1)
        fname2 = "goof-{}-{}-alt-{}-oscfr.pickle".format(N, its, "_".join("{:.2f}".format(v) for v in vs.values))
        mc2.persist(fname2, iterations=its)
        alt_exp0 = exploitability(g2, 0, mc2)
        alt_exp1 = exploitability(g2, 1, mc2)
        print("Exploitability (mc2, g2)", alt_exp0, alt_exp1)
        orig_exp0 = exploitability(g, 0, mc2)
        orig_exp1 = exploitability(g, 1, mc2)
        print("Exploitability (mc2, g)", orig_exp0, orig_exp1)

        data.append([its, np.mean([exp0, exp1]), np.mean([alt_exp0, alt_exp1]),
                     np.mean([orig_exp0, orig_exp1])] + list(vs.values))


        plt.figure()
        data2 = ps.DataFrame(data, columns=["iters", "exploit", "alt_exploit", "orig_exploit"] + list(range(1, N+1)))
        data2.plot(x="iters", logx=True, logy=True)
        plt.savefig("goof-{}-report-{}.png".format(N, its), dpi=300)

        its = int(its * 2)


if __name__ == '__main__':
    main()
